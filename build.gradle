plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.10'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.checkmate'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Ensure resources are processed and copied on every build
processResources {
    // Copy all files from src/main/resources/
    filesMatching('**') {
        // No-op filter to force inclusion
    }
}

// Configure bootRun for continuous build with resource updates
tasks.named('bootRun') {
    dependsOn 'processResources' // Ensure resources are processed before running
    doFirst {
        // Log watched directories for debugging
        sourceSets.main.resources.srcDirs.each { dir ->
            println "Watching resource directory: $dir"
        }
    }
    // Ensure source resources are included in the classpath
    sourceResources sourceSets.main
}

// Ensure Java compilation includes resources
tasks.withType(JavaCompile) {
    dependsOn 'processResources'
}

test {
    useJUnitPlatform()
    
    // Run this once at the beginning of all tests
    doFirst {
        println "Initial cleanup of test database data directory..."
        delete "data"
    }
    
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions = true
        showCauses = true
        showStackTraces = true
        showStandardStreams = true
        
        // Display test names and results
        beforeTest { descriptor ->
            logger.lifecycle("Running: " + descriptor)
        }
        
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nResults: ${result.resultType} " +
                    "(${result.testCount} tests, " +
                    "${result.successfulTestCount} passed, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped)"
                println "Final cleanup of test database data directory..."
                delete "data"
            }
        }
    }
    doLast {
        println "Ensuring test database data directory is cleaned up..."
        delete "data"
    }
}